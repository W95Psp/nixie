import operator

from io                   import BytesIO, StringIO
from pathlib              import Path
from shlex                import shlex
from dotenv               import dotenv_values
from importlib.resources  import files
from functools            import reduce

class NixieFeatures:
    '''An object representing the features file in a Nixie-generated script,
    as well as certain parameters to use when building a tarball.
    '''
    extra_features: list[str]
    extra_substituters: list[str]
    extra_trusted_public_keys: list[str]

    source_cache: str
    sources_drv: str
    bins_drv: str

    pinned_channels: dict[str, Path] = {}
    include_sources: bool = False
    include_bins: bool = False

    def __init__(self, file: StringIO = None):
        '''Populate object from parsed features file.
        '''
        if file is not None:
            kvs = dotenv_values(stream=StringIO(file.read().decode()))
            self.extra_features = kvs["EXTRA_FEATURES"].split(' ')
            self.extra_substituters = kvs["EXTRA_SUBSTITUTERS"].split(' ')
            self.extra_trusted_public_keys = kvs["EXTRA_TRUSTED_PUBLIC_KEYS"].split(' ')
            self.source_cache = kvs["SOURCE_CACHE"]
            self.sources_drv = kvs["SOURCE_DERIVATION"]
            self.bins_drv = kvs["NIX_BINS_DERIVATION"]

    def print_features(self) -> str:
        '''Output the features file in the format understood by the generated script.
        '''
        return f'''
        EXTRA_FEATURES="{' '.join(self.extra_features)}"
        EXTRA_SUBSTITUTERS="{' '.join(self.extra_substituters)}"
        EXTRA_TRUSTED_PUBLIC_KEYS="{' '.join(self.extra_trusted_public_keys)}"
        SOURCE_CACHE={self.source_cache}
        SOURCE_DERIVATION={self.sources_drv}
        NIX_BINS_DERIVATION={self.bins_drv}
        '''

class NixieScript:
    '''An object representing the complete Nix script as generated by Nixie.
    '''
    from .tarball import ResourceTarball

    features: NixieFeatures
    tarball: ResourceTarball

    DELIMITER = b'-----BEGIN ARCHIVE SECTION-----'

    def __init__(self, origin: NixieFeatures | Path):
        '''Construct the script object, either from a given NixieFeatures,
        or from an existing Nix script.
        '''
        if type(origin) is NixieFeatures:
            self.features = origin
        else:
            from .tarball import ResourceTarball
            with open(origin, mode='rb') as f:
                finddel = lambda b: b[:len(self.DELIMITER)] == self.DELIMITER
                lines = f.readlines(64000)
                start = next((i for i, e in enumerate(lines) if finddel(e)))
                off = reduce(operator.add, [len(l) for l in lines[:start+1]])
                print("offset = ", off)
                f.seek(off, 0)
                self.tarball = ResourceTarball(BytesIO(f.read()))
                self.features = self.tarball.features

    def print_features(self) -> str:
        return features.print_features()

    def build(self, dest: BytesIO):
        from .tarball import ResourceTarball

        template = files('nixie.output').joinpath('nix-wrapped.sh.in').read_text()
        dest.write(str.encode(template))
        self.tarball = ResourceTarball(self.features)
        self.tarball.writeInto(dest)

