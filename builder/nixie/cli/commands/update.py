import tempfile

from rich.console import Console
from logging      import debug, error
from os           import path

from ...output    import script
from ..           import common

def _open_default_paths() -> script.NixieScript:
    common.goto_git_root()
    try:
        debug("Trying ./nix")
        return script.NixieScript('./nix')
    except:
        try:
            debug("Trying ./nix-shell")
            return script.NixieScript('./nix-shell')
        except:
            error("No nix script found in this repository. Run 'nixie init' to generate one.")
            exit(1)

def _cmd(console: Console, **args):
    ns: script.NixieScript
    with console.status("Reading Nix script configuration...", spinner='dots12') as st:
        if args['script'] is not None:
            try:
                ns = script.NixieScript(args['script'])
            except FileNotFoundError:
                error(f"'{args['script']}': No such file or directory.")
                exit(1)
            except Exception:
                error(f"'{args['script']}' does not appear to be a valid script generated by Nixie.")
                exit(1)
        else:
            ns = _open_default_paths()

    debug(ns.features.print_features())
    if ns.features.include_sources:
        debug("This script includes sources.")
    if ns.features.include_bins:
        debug("This script includes binaries.")
    debug("Included channels: %s" %list(ns.features.pinned_channels.keys()))

    if args['extra_experimental_features'] != '':
        ns.features.extra_features = args['extra_experimental_features'].split(' ')
    ns.features.extra_substituters += args['extra_substituters'].split(' ')
    ns.features.extra_trusted_public_keys += args['extra_trusted_public_keys'].split(' ')
    if args['source_cache'] != '':
        ns.features.source_cache = args['source_cache']
    if args['sources_derivation'] != '':
        ns.features.sources_drv = args['sources_derivation']
    if args['binaries_derivation'] != '':
        ns.features.bins_drv = args['binaries_derivation']
    if args['with_sources'] is not None:
        ns.include_sources = args['with_sources']
    if args['with_binaries'] is not None:
        ns.include_bins = args['with_binaries']
    if len(args['with_channel']) > 0:
        for chn in args['with_channel']:
            newc = common.nix_chn_from_arg(chn)
            debug(f"Channel '{chn}' resolved to: {newc}")
            ns.features.pinned_channels.update({chn: newc})
